from openai import OpenAI
import vrchatapi
from vrchatapi.api import authentication_api
from vrchatapi.exceptions import UnauthorizedException
from vrchatapi.models.two_factor_auth_code import TwoFactorAuthCode
from vrchatapi.models.two_factor_email_code import TwoFactorEmailCode
import configparser
from vrchatapi.rest import ApiException
import time
import csv
import string
import logging

# Generate a new bio using ChatGPT
bio_prompt = 'Generate some complete and utter nonsense.'
update_minutes = 1

blacklist_csv = 'youtube_blacklist.csv'

# Logging
logging.basicConfig(
    level=logging.INFO,
    filename='VRCbiolog.log',
    filemode='a',
    format='%(asctime)s - %(levelname)s - %(message)s'
)


# Configurations
creds = configparser.ConfigParser()
creds.read('logins.ini')

vrc_creds = vrchatapi.Configuration(
    username=creds['VRCHAT']['username'],
    password=creds['VRCHAT']['password'],
)

# Initialize OpenAI
openai = OpenAI(
    api_key=creds['OPENAI']['api_key'],  # this is also the default, it can be omitted
    organization=creds['OPENAI']['organization']
)


def generate_bio(prompt, model="curie"):
    try:
        completion = openai.completions.create(
            model=model,
            prompt=prompt,
            temperature=0.7,
            max_tokens=70
        )
    except Exception as e:
        print('Error:', e)  # print the exception and try again
        logging.exception(e)
        completion = openai.completions.create(
            model=model,
            prompt=prompt,
            temperature=0.7,
            max_tokens=70
        )

    return completion.choices[0].text


# Parse the blacklist and return it as a list
def parse_csv_file(file_path):
    result_list = []

    try:
        with open(file_path, 'r', newline='', encoding='utf-8') as csvfile:
            reader = csv.reader(csvfile)
            for row in reader:
                # Assuming the words are in the first column of the CSV file
                if row:
                    # Join all values in the row into a single string
                    entry = ','.join(row)
                    # Split the entry into individual words
                    words = entry.split(',')
                    # Remove leading and trailing spaces from each word
                    words = [word.strip() for word in words]
                    # Extend the result list with the individual words
                    result_list.extend(words)
    except FileNotFoundError:
        print(f"Error: File not found at {file_path}")

    return result_list


# Censor certain words if they are generated by ChatGPT
def censor_string(input_string, censor_word_list):
    result_words = []

    for word in input_string.split():
        # Handle punctuation
        punctuation = ''
        while word and word[-1] in string.punctuation:
            punctuation = word[-1] + punctuation
            word = word[:-1]

        # Check if the word or phrase is in the censor list
        censored = any(censored_word.lower() in word.lower() for censored_word in censor_word_list)

        # Replace characters from the second position onward with asterisks if censored
        if censored:
            word = word[0] + '*' * (len(word) - 1)

        # Add punctuation back to the censored word or phrase
        result_words.append(word + punctuation)

    # Join the modified words back into a string
    result_string = ' '.join(result_words)
    return result_string


# Generate the list of censor words
censor_list = parse_csv_file(blacklist_csv)


# Step 2. VRChat consists of several API's (WorldsApi, UsersApi, FilesApi, NotificationsApi, FriendsApi, etc...)
# Here we enter a context of the API Client and instantiate the Authentication API which is required for logging in.

# Enter a context with an instance of the API client
with vrchatapi.ApiClient(vrc_creds) as api_client:
    # Instantiate instances of API classes
    auth_api = authentication_api.AuthenticationApi(api_client)

    try:
        # Step 3. Calling getCurrentUser on Authentication API logs you in if the user isn't already logged in.
        current_user = auth_api.get_current_user()
    except UnauthorizedException as e:
        if e.status == 200:
            if "Email 2 Factor Authentication" in e.reason:
                # Step 3.5. Calling email verify2fa if the account has 2FA disabled
                auth_api.verify2_fa_email_code(two_factor_email_code=TwoFactorEmailCode(input("Email 2FA Code: ")))
            elif "2 Factor Authentication" in e.reason:
                # Step 3.5. Calling verify2fa if the account has 2FA enabled
                auth_api.verify2_fa(two_factor_auth_code=TwoFactorAuthCode(input("2FA Code: ")))
            current_user = auth_api.get_current_user()
        else:
            print("Exception when calling API: %s\n", e)
    except vrchatapi.ApiException as e:
        print("Exception when calling API: %s\n", e)

    # Print basic details
    print("Logged in as:", current_user.display_name)
    print("Cookie:", auth_api.verify_auth_token())
    print("Current user ID:", current_user.id)
    print("Current user Bio:\n", current_user.bio)
    logging.info("Logged in as: " + current_user.display_name)
    logging.info("Current user ID: " + str(current_user.id))
    logging.info("Current user Bio: " + current_user.bio)

    user_id = current_user.id


    def update_bio(bio):
        # Generate a request
        usersapi = vrchatapi.UsersApi(api_client)
        update_user_request = vrchatapi.UpdateUserRequest(bio=bio)  # UpdateUserRequest |  (optional)

        # Send the request
        try:
            # Update User Info
            api_response = usersapi.update_user(user_id, update_user_request=update_user_request)
            print("Successfully updated bio")
        except ApiException:
            print("Exception when calling UsersApi->update_user: %s\n" % ApiException)

    # Enter a loop to repeatedly update bio at regular intervals
    while True:
        print("------------------------------------------------------------------------")
        new_bio = generate_bio(bio_prompt)
        logging.info("Raw bio: " + new_bio.replace("\n", " ").replace("\r", ""))
        new_bio = censor_string(new_bio, censor_list)
        new_bio = "Bio generated by ChatGPT every " + str(update_minutes) + " minutes.\n" + new_bio
        logging.info("Censored bio: " + new_bio)
        print("Newly generated bio:\n", new_bio)
        update_bio(str(new_bio))
        time.sleep(update_minutes * 60)
